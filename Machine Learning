{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n","metadata":{"execution":{"iopub.status.busy":"2024-06-08T05:48:20.503860Z","iopub.execute_input":"2024-06-08T05:48:20.504246Z","iopub.status.idle":"2024-06-08T05:48:20.509026Z","shell.execute_reply.started":"2024-06-08T05:48:20.504215Z","shell.execute_reply":"2024-06-08T05:48:20.507865Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"import pandas as pd","metadata":{"execution":{"iopub.status.busy":"2024-06-08T05:48:23.005062Z","iopub.execute_input":"2024-06-08T05:48:23.005454Z","iopub.status.idle":"2024-06-08T05:48:23.010549Z","shell.execute_reply.started":"2024-06-08T05:48:23.005423Z","shell.execute_reply":"2024-06-08T05:48:23.009195Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression","metadata":{"execution":{"iopub.status.busy":"2024-06-08T05:50:13.079019Z","iopub.execute_input":"2024-06-08T05:50:13.079493Z","iopub.status.idle":"2024-06-08T05:50:13.084632Z","shell.execute_reply.started":"2024-06-08T05:50:13.079456Z","shell.execute_reply":"2024-06-08T05:50:13.083605Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":"Download Data\n","metadata":{}},{"cell_type":"code","source":"data_root = \"https://github.com/ageron/data/raw/main/\"\nlifesat=pd.read_csv(data_root + \"lifesat/lifesat.csv\")\n","metadata":{"execution":{"iopub.status.busy":"2024-06-08T05:48:28.944017Z","iopub.execute_input":"2024-06-08T05:48:28.944396Z","iopub.status.idle":"2024-06-08T05:48:29.172358Z","shell.execute_reply.started":"2024-06-08T05:48:28.944369Z","shell.execute_reply":"2024-06-08T05:48:29.171085Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"lifesat","metadata":{"execution":{"iopub.status.busy":"2024-06-08T05:48:31.050384Z","iopub.execute_input":"2024-06-08T05:48:31.050798Z","iopub.status.idle":"2024-06-08T05:48:31.065444Z","shell.execute_reply.started":"2024-06-08T05:48:31.050766Z","shell.execute_reply":"2024-06-08T05:48:31.064253Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"           Country  GDP per capita (USD)  Life satisfaction\n0           Russia          26456.387938                5.8\n1           Greece          27287.083401                5.4\n2           Turkey          28384.987785                5.5\n3           Latvia          29932.493910                5.9\n4          Hungary          31007.768407                5.6\n5         Portugal          32181.154537                5.4\n6           Poland          32238.157259                6.1\n7          Estonia          35638.421351                5.7\n8            Spain          36215.447591                6.3\n9         Slovenia          36547.738956                5.9\n10       Lithuania          36732.034744                5.9\n11          Israel          38341.307570                7.2\n12           Italy          38992.148381                6.0\n13  United Kingdom          41627.129269                6.8\n14          France          42025.617373                6.5\n15     New Zealand          42404.393738                7.3\n16          Canada          45856.625626                7.4\n17         Finland          47260.800458                7.6\n18         Belgium          48210.033111                6.9\n19       Australia          48697.837028                7.3\n20          Sweden          50683.323510                7.3\n21         Germany          50922.358023                7.0\n22         Austria          51935.603862                7.1\n23         Iceland          52279.728851                7.5\n24     Netherlands          54209.563836                7.4\n25         Denmark          55938.212809                7.6\n26   United States          60235.728492                6.9","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>GDP per capita (USD)</th>\n      <th>Life satisfaction</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Russia</td>\n      <td>26456.387938</td>\n      <td>5.8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Greece</td>\n      <td>27287.083401</td>\n      <td>5.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Turkey</td>\n      <td>28384.987785</td>\n      <td>5.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Latvia</td>\n      <td>29932.493910</td>\n      <td>5.9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Hungary</td>\n      <td>31007.768407</td>\n      <td>5.6</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Portugal</td>\n      <td>32181.154537</td>\n      <td>5.4</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Poland</td>\n      <td>32238.157259</td>\n      <td>6.1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Estonia</td>\n      <td>35638.421351</td>\n      <td>5.7</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Spain</td>\n      <td>36215.447591</td>\n      <td>6.3</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Slovenia</td>\n      <td>36547.738956</td>\n      <td>5.9</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Lithuania</td>\n      <td>36732.034744</td>\n      <td>5.9</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Israel</td>\n      <td>38341.307570</td>\n      <td>7.2</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Italy</td>\n      <td>38992.148381</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>United Kingdom</td>\n      <td>41627.129269</td>\n      <td>6.8</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>France</td>\n      <td>42025.617373</td>\n      <td>6.5</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>New Zealand</td>\n      <td>42404.393738</td>\n      <td>7.3</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Canada</td>\n      <td>45856.625626</td>\n      <td>7.4</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Finland</td>\n      <td>47260.800458</td>\n      <td>7.6</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Belgium</td>\n      <td>48210.033111</td>\n      <td>6.9</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Australia</td>\n      <td>48697.837028</td>\n      <td>7.3</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Sweden</td>\n      <td>50683.323510</td>\n      <td>7.3</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Germany</td>\n      <td>50922.358023</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Austria</td>\n      <td>51935.603862</td>\n      <td>7.1</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Iceland</td>\n      <td>52279.728851</td>\n      <td>7.5</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Netherlands</td>\n      <td>54209.563836</td>\n      <td>7.4</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Denmark</td>\n      <td>55938.212809</td>\n      <td>7.6</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>United States</td>\n      <td>60235.728492</td>\n      <td>6.9</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Visual Data","metadata":{}},{"cell_type":"code","source":"x = lifesat[[\"GDP per capita (USD)\"]].values\ny = lifesat[[\"Life satisfaction\"]].vlaues\n\n\nlifesat.plot(kind='scatter',grid=true, x=\"GDP per capita (USD)\", y=\"life satisfaction\")\nplt.axis([23_500,62_500,4,9])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-08T05:50:57.735565Z","iopub.execute_input":"2024-06-08T05:50:57.735968Z","iopub.status.idle":"2024-06-08T05:50:57.765542Z","shell.execute_reply.started":"2024-06-08T05:50:57.735938Z","shell.execute_reply":"2024-06-08T05:50:57.763967Z"},"trusted":true},"execution_count":37,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_32/2596350488.py\u001b[0m in \u001b[0;36m?\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlifesat\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"GDP per capita (USD)\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlifesat\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Life satisfaction\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvlaues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mlifesat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'scatter'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mgrid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"GDP per capita (USD)\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"life satisfaction\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m?\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   6295\u001b[0m             \u001b[0;32mand\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6296\u001b[0m             \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6297\u001b[0m         ):\n\u001b[1;32m   6298\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6299\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'vlaues'"],"ename":"AttributeError","evalue":"'DataFrame' object has no attribute 'vlaues'","output_type":"error"}]}]}